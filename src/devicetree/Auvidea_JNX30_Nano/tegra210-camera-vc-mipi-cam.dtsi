/*
 * Copyright (c) 2020-2021, Vision Components GmbH.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

// ------------------------------------------------------------------------------------------------
//  Driver Configuration for NVIDIA Jetson Nano on Auvidea JNX30-LC-PD
// ------------------------------------------------------------------------------------------------
#define VC_MIPI_CAM_AB      1   // 1: Enabled, 0: Disabled  (serial_a => CSI Port 0 => VI Stream 0)
#define VC_MIPI_CAM_CD      1   // 1: Enabled, 0: Disabled  (serial_c => CSI Port 2 => VI Stream 2)
#define VC_MIPI_CAM_E       0   // 1: Enabled, 0: Disabled  (serial_e => CSI Port 4 => VI Stream 4)
#define VC_MIPI_CAM_F       0   // 1: Enabled, 0: Disabled  (serial_f => CSI Port 5 => VI Stream 5)
// ------------------------------------------------------------------------------------------------
//  Supported number of lanes
// -----+------------------------------------------------------------------------------------------
//  1   | OV7251, IMX296, IMX297
//  2   | OV9281, IMX264, IMX265
//  2,4 | IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290, IMX327, IMX335, IMX392, 
//      | IMX412, IMX415, IMX568
// -----+------------------------------------------------------------------------------------------
#define VC_MIPI_LANES       4   // 1, 2, 4 Lanes
// ------------------------------------------------------------------------------------------------
//   Sensor Manufacturer
// -----+------------------------------------------------------------------------------------------
//   1  | Sony Sensor (IMX)
//   2  | Omni Vision Sensor (OV)
// -----+------------------------------------------------------------------------------------------
#define VC_MIPI_MANUFACTURER 1
// ------------------------------------------------------------------------------------------------
//  GStreamer Support
// ------------------------------------------------------------------------------------------------
//  If you want to use GStreamer with nvarguscamerasrc you have to adjust this settings in the 
//  device tree below. The sections which have to be modified are marked by a comment. 
//  To find the correct parameter values please follow the instruction in the main README.md of 
//  this repository https://github.com/VC-MIPI-modules/vc_mipi_nvidia#gstreamer-support
// ------------------------------------------------------------------------------------------------

#define VC_MIPI_METADATA_H  "0"

#if VC_MIPI_LANES == 1
    #define BUS_WIDTH 1
    #define NUM_LANES "1" 
    #define NUM_CSI_LANES 2
#endif
#if VC_MIPI_LANES == 2
    #define BUS_WIDTH 2
    #define NUM_LANES "2" 
    #define NUM_CSI_LANES 4
#endif
#if VC_MIPI_LANES == 4
    #define BUS_WIDTH 4
    #define NUM_LANES "4" 
    #define NUM_CSI_LANES 8
#endif

#if VC_MIPI_CAM_AB == 1 && VC_MIPI_CAM_CD == 1
    #define VC_MIPI_CAMERAS 2
#else
    #define VC_MIPI_CAMERAS 1
#endif

/ {
    host1x {
        vc_vi_base: vi {
            num-channels = <VC_MIPI_CAMERAS>;
            ports {
                #address-cells = <1>;
                #size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
                vc_vi_port0: port@0 {
                    reg = <0>;
                    vc_vi_in0: endpoint {
                        port-index = <0>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out0>;
                    };
                };
#endif
#if VC_MIPI_CAM_CD == 1
                vc_vi_port1: port@1 {
                    reg = <1>;
                    vc_vi_in1: endpoint {
                        port-index = <2>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out1>;
                    };
                };
#endif
#if VC_MIPI_CAM_E == 1
                vc_vi_port2: port@2 {
                    reg = <2>;
                    vc_vi_in2: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out2>;
                    };
                };
#endif
#if VC_MIPI_CAM_F == 1
                vc_vi_port3: port@3 {
                    reg = <3>;
                    vc_vi_in3: endpoint {
                        port-index = <5>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_out3>;
                    };
                };
#endif
            };
        };

        vc_csi_base: nvcsi {
            num-channels = <VC_MIPI_CAMERAS>;
            #address-cells = <1>;
            #size-cells = <0>;
#if VC_MIPI_CAM_AB == 1
            vc_csi_chan0: channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan0_port0: port@0 {
                        reg = <0>;
                        vc_csi_in0: endpoint@0 {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out0>;
                        };
                    };
                    vc_csi_chan0_port1: port@1 {
                        reg = <1>;
                        vc_csi_out0: endpoint@1 {
                            remote-endpoint = <&vc_vi_in0>;
                        };
                    };
                };
            };
#endif
#if VC_MIPI_CAM_CD == 1
            vc_csi_chan1: channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan1_port0: port@0 {
                        reg = <0>;
                        vc_csi_in1: endpoint@2 {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out1>;
                        };
                    };
                    vc_csi_chan1_port1: port@1 {
                        reg = <1>;
                        vc_csi_out1: endpoint@3 {
                            remote-endpoint = <&vc_vi_in1>;
                        };
                    };
                };
            };
#endif
#if VC_MIPI_CAM_E == 1
            vc_csi_chan2: channel@2 {
                reg = <2>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan2_port0: port@0 {
                        reg = <0>;
                        vc_csi_in2: endpoint@4 {
                            port-index = <4>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out2>;
                        };
                    };
                    vc_csi_chan2_port1: port@1 {
                        reg = <1>;
                        vc_csi_out2: endpoint@5 {
                            remote-endpoint = <&vc_vi_in2>;
                        };
                    };
                };
            };
 #endif
 #if VC_MIPI_CAM_F == 1
            vc_csi_chan3: channel@3 {
                reg = <3>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    vc_csi_chan3_port0: port@0 {
                        reg = <0>;
                        vc_csi_in3: endpoint@6 {
                            port-index = <5>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_mipi_out3>;
                        };
                    };
                    vc_csi_chan3_port1: port@1 {
                        reg = <1>;
                        vc_csi_out3: endpoint@7 {
                            remote-endpoint = <&vc_vi_in3>;
                        };
                    };
                };
            };
#endif
        };

#if VC_MIPI_CAM_AB == 1
        i2c@546c0000 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam0: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam0: vc_mipi@60 {
                reg                     = <0x60>;
#endif
                compatible              = "nvidia,vc_mipi";
                devnode                 = "video0";
                use_sensor_mode_id      = "false";
                sensor_model            = "vc_mipi";

                num_lanes               = NUM_LANES;
                trigger_mode            = "0";
                io_mode                 = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings
                physical_w              = "1.000";
                physical_h              = "1.000";
                // ----------------------------------------------------

                // This node is needed by the Tegra framework.
                // You don't have to change any settings if just want to use the V4L API.
                mode0 {
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_a";
                    embedded_metadata_height = VC_MIPI_METADATA_H;
                    readout_orientation      = "0";

                    // ----------------------------------------------------
                    // If you want to use GStreamer with nvarguscamerasrc
                    // you have to adjust this settings. 
                    active_l                 = "0";
                    active_t                 = "0";
                    active_w                 = "0";
                    active_h                 = "0";
                    pixel_t                  = "bayer_rggb";

                    min_gain_val             = "0";         // mdB
                    max_gain_val             = "48000";     // mdB
                    step_gain_val            = "100";       // mdB
                    default_gain             = "0";         // mdB

                    min_exp_time             = "1";         // us
                    max_exp_time             = "1000000";   // us
                    step_exp_time            = "1";         // us
                    default_exp_time         = "10000";     // us

                    min_framerate            = "0";         // mHz
                    max_framerate            = "60000";     // mHz
                    step_framerate           = "100";       // mHz
                    default_framerate        = "60000";     // mHz
                    // ----------------------------------------------------

                    gain_factor              = "1000";
                    exposure_factor          = "1000000";
                    framerate_factor         = "1000";
                    inherent_gain            = "1";
                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";

                    line_length              = "0";
                    phy_mode                 = "DPHY";
                    discontinuous_clk        = "no";
                    mclk_khz                 = "24000";
                    pix_clk_hz               = "800000000";
                    mclk_multiplier          = "9.33";
                    cil_settletime           = "0";
                    dpcm_enable              = "false";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_out0: endpoint {
                            port-index = <0>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_csi_in0>;
                        };
                    };
                };
            };
        };
#endif
#if VC_MIPI_CAM_CD == 1
        i2c@7000c000 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam1: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam1: vc_mipi@60 {
                reg                     = <0x60>;
#endif
                compatible              = "nvidia,vc_mipi";
                devnode                 = "video1";
                use_sensor_mode_id      = "false";
                sensor_model            = "vc_mipi";

                num_lanes               = NUM_LANES;
                trigger_mode            = "0";
                io_mode                 = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings
                physical_w              = "1.000";
                physical_h              = "1.000";
                // ----------------------------------------------------

                // This node is needed by the Tegra framework.
                // You don't have to change any settings if just want to use the V4L API.
                mode0 {
                    num_lanes                = NUM_LANES;
                    tegra_sinterface         = "serial_c";
                    embedded_metadata_height = VC_MIPI_METADATA_H;
                    readout_orientation      = "0";

                    // ----------------------------------------------------
                    // If you want to use GStreamer with nvarguscamerasrc
                    // you have to adjust this settings. 
                    active_l                 = "0";
                    active_t                 = "0";
                    active_w                 = "0";
                    active_h                 = "0";
                    pixel_t                  = "bayer_rggb";

                    min_gain_val             = "0";         // mdB
                    max_gain_val             = "48000";     // mdB
                    step_gain_val            = "100";       // mdB
                    default_gain             = "0";         // mdB

                    min_exp_time             = "1";         // us
                    max_exp_time             = "1000000";   // us
                    step_exp_time            = "1";         // us
                    default_exp_time         = "10000";     // us

                    min_framerate            = "0";         // mHz
                    max_framerate            = "60000";     // mHz
                    step_framerate           = "100";       // mHz
                    default_framerate        = "60000";     // mHz
                    // ----------------------------------------------------

                    gain_factor              = "1000";
                    exposure_factor          = "1000000";
                    framerate_factor         = "1000";
                    inherent_gain            = "1";
                    min_hdr_ratio            = "1";
                    max_hdr_ratio            = "1";

                    line_length              = "0";
                    phy_mode                 = "DPHY";
                    discontinuous_clk        = "no";
                    mclk_khz                 = "24000";
                    pix_clk_hz               = "800000000";
                    mclk_multiplier          = "9.33";
                    cil_settletime           = "0";
                    dpcm_enable              = "false";
                };

                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        vc_mipi_out1: endpoint {
                            port-index = <2>;
                            bus-width = <BUS_WIDTH>;
                            remote-endpoint = <&vc_csi_in1>;
                        };
                    };
                };
            };
        };
#endif
    };
      
#if VC_MIPI_CAM_E == 1
    i2c@7000c400 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam2: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam2: vc_mipi@60 {
                reg                     = <0x60>;
#endif
            compatible              = "nvidia,vc_mipi";
            devnode                 = "video2";
            use_sensor_mode_id      = "false";
            sensor_model            = "vc_mipi";

            num_lanes               = NUM_LANES;
            trigger_mode            = "0";
            io_mode                 = "0";

            // ----------------------------------------------------
            // If you want to use GStreamer with nvarguscamerasrc
            // you have to adjust this settings
            physical_w              = "1.000";
            physical_h              = "1.000";
            // ----------------------------------------------------

            // This node is needed by the Tegra framework.
            // You don't have to change any settings if just want to use the V4L API.
            mode0 {
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_e";
                embedded_metadata_height = VC_MIPI_METADATA_H;
                readout_orientation      = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings. 
                active_l                 = "0";
                active_t                 = "0";
                active_w                 = "0";
                active_h                 = "0";
                pixel_t                  = "bayer_rggb";

                min_gain_val             = "0";         // mdB
                max_gain_val             = "48000";     // mdB
                step_gain_val            = "100";       // mdB
                default_gain             = "0";         // mdB

                min_exp_time             = "1";         // us
                max_exp_time             = "1000000";   // us
                step_exp_time            = "1";         // us
                default_exp_time         = "10000";     // us

                min_framerate            = "0";         // mHz
                max_framerate            = "60000";     // mHz
                step_framerate           = "100";       // mHz
                default_framerate        = "60000";     // mHz
                // ----------------------------------------------------

                gain_factor              = "1000";
                exposure_factor          = "1000000";
                framerate_factor         = "1000";
                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";

                line_length              = "0";
                phy_mode                 = "DPHY";
                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                mclk_multiplier          = "9.33";
                cil_settletime           = "0";
                dpcm_enable              = "false";
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;
                port@0 {
                    reg = <0>;
                    vc_mipi_out2: endpoint {
                        port-index = <4>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_in2>;
                    };
                };
            };
        };
    };
#endif
#if VC_MIPI_CAM_F == 1
    i2c@7000c500 {
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi_cam3: vc_mipi@1a {
                reg                     = <0x1a>;
#else
            vc_mipi_cam3: vc_mipi@60 {
                reg                     = <0x60>;
#endif
            compatible              = "nvidia,vc_mipi";
            devnode                 = "video3";
            use_sensor_mode_id      = "false";
            sensor_model            = "vc_mipi";

            num_lanes               = NUM_LANES;
            trigger_mode            = "0";
            io_mode                 = "0";

            // ----------------------------------------------------
            // If you want to use GStreamer with nvarguscamerasrc
            // you have to adjust this settings
            physical_w              = "1.000";
            physical_h              = "1.000";
            // ----------------------------------------------------

            // This node is needed by the Tegra framework.
            // You don't have to change any settings if just want to use the V4L API.
            mode0 {
                num_lanes                = NUM_LANES;
                tegra_sinterface         = "serial_f";
                embedded_metadata_height = VC_MIPI_METADATA_H;
                readout_orientation      = "0";

                // ----------------------------------------------------
                // If you want to use GStreamer with nvarguscamerasrc
                // you have to adjust this settings. 
                active_l                 = "0";
                active_t                 = "0";
                active_w                 = "0";
                active_h                 = "0";
                pixel_t                  = "bayer_rggb";

                min_gain_val             = "0";         // mdB
                max_gain_val             = "48000";     // mdB
                step_gain_val            = "100";       // mdB
                default_gain             = "0";         // mdB

                min_exp_time             = "1";         // us
                max_exp_time             = "1000000";   // us
                step_exp_time            = "1";         // us
                default_exp_time         = "10000";     // us

                min_framerate            = "0";         // mHz
                max_framerate            = "60000";     // mHz
                step_framerate           = "100";       // mHz
                default_framerate        = "60000";     // mHz
                // ----------------------------------------------------

                gain_factor              = "1000";
                exposure_factor          = "1000000";
                framerate_factor         = "1000";
                inherent_gain            = "1";
                min_hdr_ratio            = "1";
                max_hdr_ratio            = "1";

                line_length              = "0";
                phy_mode                 = "DPHY";
                discontinuous_clk        = "no";
                mclk_khz                 = "24000";
                pix_clk_hz               = "800000000";
                mclk_multiplier          = "9.33";
                cil_settletime           = "0";
                dpcm_enable              = "false";
            };

            ports {
                #address-cells = <1>;
                #size-cells = <0>;
                port@0 {
                    reg = <0>;
                    vc_mipi_out3: endpoint {
                        port-index = <5>;
                        bus-width = <BUS_WIDTH>;
                        remote-endpoint = <&vc_csi_in3>;
                    };
                };
            };
        };
    };
#endif

    lens@vc_mipi {
        min_focus_distance  = "0.0";
        hyper_focal         = "0.0";
        focal_length        = "6.0";
        f_number            = "2.0";
        aperture            = "0.0";
    };
};

/ {
    tcp: tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";

        num_csi_lanes = <NUM_CSI_LANES>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <240000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;

        modules {
#if VC_MIPI_CAM_AB == 1
            cam_module0: module0 {
                status = "okay";
                badge = "porg_topleft_vc_mipi";
                position = "topleft";
                orientation = "1";
                cam_module0_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 6-001a";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/vc_mipi@1a";
#else
                    devname = "vc_mipi 6-0060";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/vc_mipi@60";
#endif
                };
                cam_module0_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
#if VC_MIPI_CAM_CD == 1
            cam_module1: module1 {
                status = "okay";
                badge = "porg_topright_vc_mipi";
                position = "topright";
                orientation = "1";
                cam_module1_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 0-001a";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@7000c000/vc_mipi@1a";
#else
                    devname = "vc_mipi 0-0060";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@7000c000/vc_mipi@60";
#endif
                };
                cam_module1_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
#if VC_MIPI_CAM_E == 1
            cam_module2: module2 {
                status = "okay";
                badge = "porg_bottomleft_vc_mipi";
                position = "bottomleft";
                orientation = "1";
                cam_module2_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 1-001a";
                    proc-device-tree = "/proc/device-tree/i2c@7000c400/vc_mipi@1a";
#else
                    devname = "vc_mipi 1-0060";
                    proc-device-tree = "/proc/device-tree/i2c@7000c400/vc_mipi@60";
#endif
                };
                cam_module2_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
#if VC_MIPI_CAM_F == 1
            cam_module3: module3 {
                status = "okay";
                badge = "porg_bottomright_vc_mipi";
                position = "bottomright";
                orientation = "1";
                cam_module3_drivernode0: drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
#if VC_MIPI_MANUFACTURER == 1
                    devname = "vc_mipi 2-001a";
                    proc-device-tree = "/proc/device-tree/i2c@7000c500/vc_mipi@1a";
#else
                    devname = "vc_mipi 2-0060";
                    proc-device-tree = "/proc/device-tree/i2c@7000c500/vc_mipi@60";
#endif
                };
                cam_module3_drivernode1: drivernode1 {
                    status = "okay";
                    pcl_id = "v4l2_lens";
                    proc-device-tree = "/proc/device-tree/lens@vc_mipi/";
                };
            };
#endif
        };
    };
};

#define CAM1_PWDN       TEGRA_GPIO(S, 7)
#define CAM2_PWDN       TEGRA_GPIO(T, 0)
#define CAM3_PWDN       TEGRA_GPIO(S, 5)
#define CAM4_PWDN       TEGRA_GPIO(T, 1)
#define CAM_TRIGGER	    TEGRA_GPIO(V, 0)

/ {
    host1x {
#if VC_MIPI_CAM_AB == 1
        i2c@546c0000 {
            status = "okay";
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@1a {
#else
            vc_mipi@60 {
#endif
                status = "okay";
                reset-gpios = <&gpio CAM1_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
#if VC_MIPI_CAM_CD == 1
        i2c@7000c000 {
            status = "okay";
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@1a {
#else
            vc_mipi@60 {
#endif
                status = "okay";
                reset-gpios = <&gpio CAM2_PWDN GPIO_ACTIVE_HIGH>;
            };
        };
#endif
    };

#if VC_MIPI_CAM_E == 1
    i2c@7000c400 {
        status = "okay";
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@1a {
#else
            vc_mipi@60 {
#endif
            status = "okay";
            reset-gpios = <&gpio CAM3_PWDN GPIO_ACTIVE_HIGH>;
        };
    };
#endif
#if VC_MIPI_CAM_F == 1
    i2c@7000c500 {
        status = "okay";
#if VC_MIPI_MANUFACTURER == 1
            vc_mipi@1a {
#else
            vc_mipi@60 {
#endif
            status = "okay";
            reset-gpios = <&gpio CAM4_PWDN GPIO_ACTIVE_HIGH>;
        };
    };
#endif

    gpio@6000d000 {
        camera-trigger-high {
            status = "okay";
            gpio-hog;
            output-high;
            gpios = <CAM_TRIGGER 0>;
            label = "cam-trigger";
        };
 
        camera-control-output-low {
            gpio-hog;
            output-low;
            gpios = < CAM1_PWDN 0  CAM2_PWDN 0>;
            label = "cam1-pwdn", "cam2-pwdn";
        };
    };
};